openapi: 3.0.0
info:
  title: API PÚBLICA e-Digital
  description: >
    API PÚBLICA de servicios e-Gestión :<br>

    Esta documentación está diseñana para catalogar sus servicios para
    integraciones RESTFUL.
  version: v1.2
  contact:
    name: Carlos Garcia
    email: carlos.garcia@e-digital.cl
    url: 'https://e-digital.global'
  x-logo:
    url: 'https://e-digital.global/media/logo-edigital.png'
    altText: E-Digital
servers:
  - url: 'https://apipub.e-digital.global/api'
paths:
  /auth:
    post:
      summary: Obtener token de autenticación
      operationId: auth
      tags:
        - Security
      description: >
        | Información     |         Detalle          |

        |-----------------|--------------------------|

        |  ID operación   |            auth          |


        En este endpoint mediante la combinación de username, password y grant
        type es posible obtener un token

        el cual es obligatorio para poder realizar el llamado en cualquiera de
        nuestras api disponibles.
      parameters:
        - name: autorization
          in: header
          description: >-
            Acceso asignado a la organización que permite el consumo de las
            API's, el cual es entregado al cliente por contrato.
          required: true
          example: 11111111-1111-11111-1111-111111111111
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - grant_type
                - username
                - password
              properties:
                grant_type:
                  type: string
                  description: >-
                    Ejemplo &#58; `password` <br> Corresponde al grant type que
                    se ocupara para la validación de combinación username
                    ,password.
                  example: password
                username:
                  type: string
                  description: >-
                    Ejemplo &#58; `test@alexlancer.com` <br> Es el mail del
                    usuario que se quiere hacer la validación.
                  example: test@alexlancer.com
                password:
                  type: array
                  description: >-
                    Ejemplo &#58; `Mi$3cr3tPa$$` <br> Es el password del usuario
                    que se quiere hacer la validación.
                  example: Mi$3cr3tPa$$
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  token:
                    type: object
                    description: Es el objecto del token obtenido
              examples:
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Documento creado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    user:
                      access_token: 863f61bada5b8ff4bae813d59144b83049242cd3
                      expires_in: 3600
                      token_type: Bearer
                      scope: app
                      refresh_token: 0ae9b3643d4c9b6541661f13a9736490c21171b2
        '401':
          description: Error de solicitud
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  message:
                    type: string
                    description: >-
                      mensaje de respuesta, traducción humana del código de
                      resultado.
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Error:
                  value:
                    code: 401
                    duration: 12
                    time: 2020-08-27T15:25:25.000Z
                    message: Combinación de nombre de usuario y contraseña no válida
                    trackingId: 60f7812e-58d1-4cca-b1a9-60e0a3c32e43
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/auth \
              --header 'autorization: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --data '{"grant_type":"password","username":"test@alexlancer.com","password":"Mi$3cr3tPa$$"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"grant_type\":\"password\",\"username\":\"test@alexlancer.com\",\"password\":\"Mi$3cr3tPa$$\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/auth")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("autorization", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/auth");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("autorization", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"grant_type\":\"password\",\"username\":\"test@alexlancer.com\",\"password\":\"Mi$3cr3tPa$$\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/auth",
              "method": "POST",
              "headers": {
                "content-type": "application/json",
                "autorization": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"grant_type\":\"password\",\"username\":\"test@alexlancer.com\",\"password\":\"Mi$3cr3tPa$$\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/auth",
              "headers": {
                "content-type": "application/json",
                "autorization": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              grant_type: 'password',
              username: 'test@alexlancer.com',
              password: 'Mi$3cr3tPa$$'
            }));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/auth",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"grant_type\":\"password\",\"username\":\"test@alexlancer.com\",\"password\":\"Mi$3cr3tPa$$\"}",
              CURLOPT_HTTPHEADER => array(
                "autorization: SOME_STRING_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload =
            "{\"grant_type\":\"password\",\"username\":\"test@alexlancer.com\",\"password\":\"Mi$3cr3tPa$$\"}"


            headers = {
                'content-type': "application/json",
                'autorization': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/api/auth", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  /users:
    post:
      summary: Crea un Usuario
      operationId: users.create
      tags:
        - Users
      description: >
        | Información  | Detalle      |

        |--------------|--------------|

        | ID operación | users.create |


        Cada usuario final es representado por un usuario único de sistema.

        En esta API es posible crear dicho usuario en el sistema para que pueda
        recibir y firmar documentos.

        Cada documento debe ser firmado por un usuario existente en la
        plataforma.

        Es a los usuarios finalmente a quienes les llegan los documentos que se
        encuentran pendientes de firma.

        Cada usuarios puede pertenecer a más de una empresa, esta vinculación se
        puede hacer con la API

        [Invitar Usuario](#operation/organizations.users.invite)
      parameters:
        - &ref_0
          name: token
          in: header
          description: >-
            Token de acceso que permite el consumo de las API's, el cual se
            puede obtener en la API [/auth](#operation/auth).
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - surname
                - identity_document
                - type_identity_document
                - birth
                - gender
                - email
                - type
              properties:
                name:
                  type: string
                  description: >-
                    Ejemplo &#58; `Ramón` <br> Nombre compuesto del usuario a
                    crear
                  example: Ramón
                surname:
                  type: string
                  description: >-
                    Ejemplo &#58; `Montalva Montoya` <br>  Apellidos del usuario
                    a crear.
                  example: Montalva Montoya
                identity_document:
                  type: string
                  description: Ejemplo &#58; `12345678-9` <br>  Rut del usuario a crear.
                  example: 12345678-9
                type_identity_document:
                  type: string
                  enum:
                    - CEDULA_EXT
                    - CEDULA
                  description: >
                    Ejemplo &#58; `CEDULA`
                     <br> Corresponde al tipo de documento del usuario a crear <br>

                    | Valor      |
                    Descripción                                                 
                    |PAIS |

                    |------------|--------------------------------------------------------------|-----|

                    | CEDULA_EXT | En el caso de ser una cédula
                    extranjera                      |CL   |

                    | CEDULA     | En el caso de ser una cédula
                    chilena                         |CL   |

                    | DNI        | En el caso de ser un documento de identidad
                    peruano          |PE   |

                    | CE         | En el caso de ser Canet de extranjero
                    peruano                |PE   |

                    | PTP        | En el caso de ser una Tarjeta de permiso de
                    trabaajo peruano |PE   |

                    | PASAPORTE  | En el caso de ser un
                    Pasaporte                               |PE   |

                    | CFP        | En el caso de ser un documento de identidad
                    brasilero        |BR   |
                  example: CEDULA_EXT
                serie_identity_document:
                  type: string
                  description: >-
                    Ejemplo &#58; `A123123123` <br> Nro de Serie del documento
                    del usuario a crear. 10 ó 9 caracteres , según el tipo de
                    carnet (Sólo CHILE)
                  example: '123123123'
                email:
                  type: string
                  description: >-
                    Ejemplo &#58; `tucorreo@empresa.cl` <br> Corresponde al
                    email del usuario a crear.
                  example: tucorreo@empresa.cl
                email2:
                  type: string
                  description: >-
                    Ejemplo &#58; `tucorreo2@empresa.cl` <br> Corresponde al
                    email secundario del usuario a crear. Puede ser el email
                    corporativo
                  example: tucorreo@empresa.cl
                password:
                  type: string
                  description: >-
                    Ejemplo &#58; `myS3cretPass` <br> Password del usuario a
                    crear.
                  example: myS3cretPass
                address:
                  type: string
                  description: >-
                    Ejemplo &#58; `Badajoz 100 – Piso 15 (Oficina 1519), Las
                    Condes` <br> Drección del usuario a crear
                  example: 'Badajoz 100 – Piso 15 (Oficina 1519), Las Condes'
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  description: >-
                    Ejemplo &#58; `male` <br>  Corresponde al genero del usuario
                    a crear.
                  example: male
                birth:
                  type: string
                  description: >-
                    Ejemplo &#58; `1970-12-31` <br> Fecha de nacimiento del
                    usuario a crear `(YYYY-MM-DD)`
                  example: '1970-12-31'
                phone:
                  type: string
                  description: >-
                    Ejemplo &#58; `222198406` <br>  Número de teléfono del
                    usuario a crear. (sólo números)
                  example: '222198406'
                type:
                  type: string
                  enum:
                    - internal
                    - external
                  description: >
                    Ejemplo &#58; `external`

                    Corresponde al tipo de usuario a crear <br>


                    | Valor    |
                    Descripción                                                              
                    |

                    |----------|--------------------------------------------------------------------------|

                    | internal | Usuarios que son parte de la organización
                    (empleados, socios, etc)       |

                    | external | Usuarios que no son parte de la organización
                    como proveedores o clientes |
                  example: internal
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - código
                  - mensaje
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  cod_user:
                    type: string
                    format: '{type_identity_document}-{identity_document}'
                    description: >-
                      Identificador del Usuario (cod_user) es un código
                      compuesto por el tipo documento de identidad más su número
                      de identidad; dado a que existe un registro único de
                      usuario en el sitema. En caso de exitir el usuario
                      registrado por alguna otra organización sería imposible
                      saber su ID que lo identifica en el sistema para poder
                      consultar su existencia antes de crearlo.
              examples:
                Token Inválido: &ref_1
                  value:
                    code: 3
                    duration: 207
                    time: 2020-08-04T09:44:42.245Z
                    errors: []
                    message: Acceso denegado
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                Sin Permiso: &ref_2
                  value:
                    code: 5
                    duration: 207
                    time: 2020-08-04T09:44:42.245Z
                    errors: []
                    message: Usted no tiene permiso para efectuar esta actividad
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Usuario registrado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    cod_user: CEDULA_EXT-12345678-9
        '400': &ref_3
          description: Error de solicitud
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - errors
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                  message:
                    type: string
                    description: >-
                      mensaje de respuesta, traducción humana del código de
                      resultado.
                  errors:
                    type: array
                    items:
                      type: string
                    description: >-
                      Listado de errores encontrados durante el procesamiento de
                      la solicitud
              examples:
                Error:
                  value:
                    code: 400
                    message: Bad Request
                    errors:
                      - Verifique el Request Enviado
        '500': &ref_4
          description: Error de servidor
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - errors
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                  message:
                    type: string
                    description: >-
                      Mesage de respuesta, traducción humana del código de
                      resultado.
                  errors:
                    type: array
                    items:
                      type: string
                    description: >-
                      Listado de errores encontrados durante el procesamiento de
                      la solicitud
              examples:
                Error:
                  value:
                    code: 500
                    message: Error interno en el servidor.
                    errors:
                      - Internal Error Server
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/users \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"name":"Ramón","surname":"Montalva Montoya","identity_document":"12345678-9","type_identity_document":"CEDULA_EXT","serie_identity_document":"123123123","email":"tucorreo@empresa.cl","email2":"tucorreo@empresa.cl","password":"myS3cretPass","address":"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes","gender":"male","birth":"1970-12-31","phone":"222198406","type":"internal"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"name\":\"Ramón\",\"surname\":\"Montalva
            Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"222198406\",\"type\":\"internal\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"Ramón\",\"surname\":\"Montalva
            Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"222198406\",\"type\":\"internal\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users",
              "method": "POST",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"name\":\"Ramón\",\"surname\":\"Montalva Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"222198406\",\"type\":\"internal\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              name: 'Ramón',
              surname: 'Montalva Montoya',
              identity_document: '12345678-9',
              type_identity_document: 'CEDULA_EXT',
              serie_identity_document: '123123123',
              email: 'tucorreo@empresa.cl',
              email2: 'tucorreo@empresa.cl',
              password: 'myS3cretPass',
              address: 'Badajoz 100 – Piso 15 (Oficina 1519), Las Condes',
              gender: 'male',
              birth: '1970-12-31',
              phone: '222198406',
              type: 'internal'
            }));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"name\":\"Ramón\",\"surname\":\"Montalva Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"222198406\",\"type\":\"internal\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload = "{\"name\":\"Ramón\",\"surname\":\"Montalva
            Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"222198406\",\"type\":\"internal\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/api/users", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/users/{cod_user}':
    get:
      summary: Obtiene información de un usuario
      operationId: users.info
      tags:
        - Users
      description: >
        | Información  | Detalle    |

        |--------------|------------|

        | ID operación | users.info |


        Los usuarios finales luego de ser creados en la API [Crear
        Usuario](#operation/users.create),

        y asociados a una organización en la API [Invitar
        Usuario](#operation/organizations.users.invite).

        Si en algún momento de desea obtener la información de dicho usuario se
        debe llamar este método

        indicando el tipo documento de identidad más su número de identidad .
      parameters:
        - *ref_0
        - &ref_5
          name: cod_user
          in: path
          description: >-
            Identificador del Usuario (cod_user) es un código compuesto por el
            tipo documento de identidad más su número de identidad; dado a que
            existe un registro único de usuario en el sitema. En caso de exitir
            el usuario registrado por alguna otra organización sería imposible
            saber su ID que lo identifica en el sistema para poder consultar su
            existencia antes de crearlo.
          required: true
          example: CEDULA-12345678-9
          schema:
            type: string
            format: '{type_identity_document}-{identity_document}'
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  user:
                    type: object
                    description: Es el objeto de la información obtenida del usuario.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Usuario obtenido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    user:
                      name: Ramon
                      surname: Montalva Montoya
                      email: tucorreo@empresa.cl
                      identity_document: 12345678-9
                      type_identity_document: CEDULA
                      serie_identity_document: '123123123'
                      password: myS3cretPass
                      address: 'Badajoz 100 – Piso 15 (Oficina 1519), Las Condes'
                      gender: male
                      birth: '1970-12-31'
                      phone: '222198406'
                      certificate: OK
                      type: internal
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("apipub.e-digital.global")

            headers = { 'token': "SOME_STRING_VALUE" }

            conn.request("GET", "/api/users/%7Bcod_user%7D", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
    put:
      summary: Modifica un Usuario
      operationId: users.change
      tags:
        - Users
      description: >
        | Información     |               Detalle              |

        |-----------------|------------------------------------|

        |  ID operación   |            users.change            |


        Los usuarios finales pueden ser creados en la API [Crear
        Usuario](#operation/users.create),

        si en algún momento se desea efectuar modificación a los datos de este
        es posible llamar

        este método y de esta forma efectuar tal acción.
      parameters:
        - *ref_0
        - *ref_5
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >-
                    Ejemplo &#58; `Ramon` <br> Nombre compuesto del usuario a
                    crear
                  example: Ramon
                surName:
                  type: string
                  description: >-
                    Ejemplo &#58; `Montalva` <br>  Apellido paterno del usuario
                    a crear.
                  example: Montalva
                middleName:
                  type: string
                  description: >-
                    Ejemplo &#58; `Montoya` <br> Apellido materno del usuario a
                    crear. <br> ***(EN LO QUE NOS PIDIERON INDICABAN QUE FALTABA
                    ESTO APELLIDO MATERNO)***
                  example: Montoya
                identity_document:
                  type: string
                  description: Ejemplo &#58; `12345678-9` <br>  Rut del usuario a crear.
                  example: 12345678-9
                type_identity_document:
                  type: string
                  enum:
                    - CEDULA_EXT
                    - CEDULA
                  description: >
                    Ejemplo &#58; `CEDULA`
                     <br> Corresponde al tipo de cedula del usuario a crear <br>

                    |    Valor   |                          
                    Descripción                        |PAIS |

                    |------------|--------------------------------------------------------------|-----|

                    |CEDULA_EXT  | En el caso de ser una cedula
                    extranjera                      |CL   |

                    |CEDULA      | En el caso de ser una cedula
                    chilena                         |CL   |

                    | DNI        | En el caso de ser un documento de identidad
                    peruano          |PE   |

                    | CE         | En el caso de ser Canet de extranjero
                    peruano                |PE   |

                    | PTP        | En el caso de ser una Tarjeta de permiso de
                    trabaajo peruano |PE   |

                    | PASAPORTE  | En el caso de ser un
                    Pasaporte                               |PE   |

                    | CFP        | En el caso de ser un documento de identidad
                    brasilero        |BR   |
                  example: CEDULA_EXT
                serie_identity_document:
                  type: string
                  description: >-
                    Ejemplo &#58; `123123123` <br> Nro de Serie del documento
                    del usuario a crear.
                  example: '123123123'
                email:
                  type: string
                  description: >-
                    Ejemplo &#58; `tucorreo2@empresa.cl` <br> Corresponde al
                    email del usuario a modificar.
                  example: tucorreo2@empresa.cl
                email2:
                  type: string
                  description: >-
                    Ejemplo &#58; `tucorreo@empresa.cl` <br> Corresponde al
                    email secundario del usuario a crear. Puede ser el email
                    corporativo
                  example: tucorreo@empresa.cl
                password:
                  type: string
                  description: >-
                    Ejemplo &#58; `myS3cretPass` <br> Password del usuario a
                    crear.
                  example: myS3cretPass
                address:
                  type: string
                  description: >-
                    Ejemplo &#58; `Badajoz 100 – Piso 15 (Oficina 1519), Las
                    Condes` <br> Drección del usuario a crear
                  example: 'Badajoz 100 – Piso 15 (Oficina 1519), Las Condes'
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  description: >-
                    Ejemplo &#58; `male` <br>  Corresponde al genero del usuario
                    a crear.
                  example: male
                birth:
                  type: string
                  description: >-
                    Ejemplo &#58; `1970-12-31` <br> Fecha de nacimiento del
                    usuario a crear `(Format yyyy-MM-dd)`
                  example: '1970-12-31'
                phone:
                  type: string
                  description: >-
                    Ejemplo &#58; `(2) 2219 8406` <br>  Número de teléfono del
                    usuario a crear.
                  example: (2) 2219 8406
                type:
                  type: string
                  enum:
                    - internal
                    - external
                  description: >
                    Ejemplo &#58; `external` Corresponde al tipo de usuario a
                    crear <br>

                    | Valor    |
                    Descripción                                                              
                    |

                    |----------|---------------------------------------------------------------------------|

                    | internal | Usuarios que son parte de la organización
                    (empleados, socios, etc)        |

                    | external | Usuarios que no son parte de la organización
                    como proveedores o clientes  |
                  example: internal
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Usuario actualizado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"name":"Ramon","surName":"Montalva","middleName":"Montoya","identity_document":"12345678-9","type_identity_document":"CEDULA_EXT","serie_identity_document":"123123123","email":"tucorreo2@empresa.cl","email2":"tucorreo@empresa.cl","password":"myS3cretPass","address":"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes","gender":"male","birth":"1970-12-31","phone":"(2) 2219 8406","type":"internal"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"name\":\"Ramon\",\"surName\":\"Montalva\",\"middleName\":\"Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo2@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"(2)
            2219 8406\",\"type\":\"internal\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D")
              .put(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"name\":\"Ramon\",\"surName\":\"Montalva\",\"middleName\":\"Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo2@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"(2)
            2219 8406\",\"type\":\"internal\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D",
              "method": "PUT",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"name\":\"Ramon\",\"surName\":\"Montalva\",\"middleName\":\"Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo2@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"(2) 2219 8406\",\"type\":\"internal\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "PUT",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              name: 'Ramon',
              surName: 'Montalva',
              middleName: 'Montoya',
              identity_document: '12345678-9',
              type_identity_document: 'CEDULA_EXT',
              serie_identity_document: '123123123',
              email: 'tucorreo2@empresa.cl',
              email2: 'tucorreo@empresa.cl',
              password: 'myS3cretPass',
              address: 'Badajoz 100 – Piso 15 (Oficina 1519), Las Condes',
              gender: 'male',
              birth: '1970-12-31',
              phone: '(2) 2219 8406',
              type: 'internal'
            }));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"name\":\"Ramon\",\"surName\":\"Montalva\",\"middleName\":\"Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo2@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz 100 – Piso 15 (Oficina 1519), Las Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"(2) 2219 8406\",\"type\":\"internal\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload =
            "{\"name\":\"Ramon\",\"surName\":\"Montalva\",\"middleName\":\"Montoya\",\"identity_document\":\"12345678-9\",\"type_identity_document\":\"CEDULA_EXT\",\"serie_identity_document\":\"123123123\",\"email\":\"tucorreo2@empresa.cl\",\"email2\":\"tucorreo@empresa.cl\",\"password\":\"myS3cretPass\",\"address\":\"Badajoz
            100 – Piso 15 (Oficina 1519), Las
            Condes\",\"gender\":\"male\",\"birth\":\"1970-12-31\",\"phone\":\"(2)
            2219 8406\",\"type\":\"internal\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("PUT", "/api/users/%7Bcod_user%7D", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/users/{cod_user}/history':
    get:
      summary: Obtiene un historial de un usuario según su ID  (No Implementado)
      operationId: users.history
      tags:
        - Users
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |           users.history            |

         Los usuarios finales desde el momento que se crean van generando un log(registros de actividades)
         Si en algún momento se desea verificar la historia de un usuario en específico se puede llamar este
         método y así obtener el total de estos registros.
      parameters:
        - *ref_0
        - *ref_5
        - name: from
          in: query
          description: >-
            Corresponde a la fecha, desde que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: false
          example: 12-03-2020
          schema:
            type: string
        - name: to
          in: query
          description: >-
            Corresponde a la fecha, hasta que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: false
          example: 12-05-2020
          schema:
            type: string
        - name: page
          in: query
          description: Corresponde al número de páginas que se quiere obtener la respuesta.
          required: false
          example: 5
          schema:
            type: integer
        - name: records
          in: query
          description: >-
            Corresponde a la cantidad de registros que se quiere por página.
            Máximo `100`
          required: false
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  history:
                    type: array
                    items:
                      type: object
                    description: Historial obtenido del usuario.
                  totalRegistros:
                    type: integer
                    description: Cantidad de los registros encontrados
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Historial obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    totalRegistros: 50
                    history:
                      - date: '2020-08-06'
                        message_event: to_create
                        result: OK
                      - date: '2020-08-07'
                        message_event: to_update
                        result: OK
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/users/%7Bcod_user%7D/history?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/users/{cod_user}/documents':
    get:
      summary: >-
        Obtiene una lista de documentos de un usuario según su ID  (No
        Implementado)
      operationId: users.documents
      tags:
        - Users
      description: >
        | Información     |               Detalle              |

        |-----------------|------------------------------------|

        |  ID operación   |         users.documents            |


        Los usuarios finales aparte de pertenecer a una organización en
        particular tienen un listado

        de documentos los cuales podrían estar en diferentes estados ya sea
        pendientes, finalizados,

        rechazados. Si en algún momento se desea tener un listado con tal data
        se debe llamar este

        método aplicando algún filtro de los que se detalla a continuación.


        Estos documentos pueden ser filtrados por tipos (Pendientes,
        Finalizados, Rechazados).


        Para listar estos documentos, deberás tener en cuenta lo que coloques en
        los filtros.


        <details>
                <summary>Ver tabla de tipos de filtros </summary>

        |    Filtro   |                              
        Descripción                                       |

        |-------------|---------------------------------------------------------------------------------|

        | all         | Se obtiene el listado completo de los documentos del
        usuario.                   |

        | open        | Se obtienen solo los documentos pendietes del
        usuario.                          |

        | signed      | Se obtienen solo los documentos finalizados del
        usuario.                        |

        | rejected    | Se obtiene solo los documentos rechazados del
        usuario.                          |

         </details>
        - ESTE ENDOINT TAMBIÉN DEBE SER TRATADO CON UNA PÁGINACIÓN COMO EL
        HISTORIAL DEL LOG
      parameters:
        - *ref_0
        - *ref_5
        - name: state_document
          description: Corresponde al filtro que se quiere aplicar a la lista obtenida.
          in: query
          schema:
            type: string
          required: true
          example: all
        - name: from
          in: query
          description: >-
            Corresponde a la fecha, desde que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: true
          example: 12-03-2020
          schema:
            type: string
        - name: to
          in: query
          description: >-
            Corresponde a la fecha, hasta que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: true
          example: 12-05-2020
          schema:
            type: string
      responses:
        '200':
          description: Respuesta a todo evento
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  documents:
                    type: array
                    items:
                      type: string
                    description: >-
                      Lista de documentos obtenidos para el usario y filtro
                      solicitado.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Listado de documentos obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/users/%7Bcod_user%7D/documents?state_document=SOME_STRING_VALUE&from=SOME_STRING_VALUE&to=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/users/{cod_user}/cetificates':
    post:
      summary: Carga un certificado para un usuario existente.  (No Implementado)
      operationId: users.certificates.create
      tags:
        - Users
      description: >
        | Información     |               Detalle              |

        |-----------------|------------------------------------|

        |  ID operación   |    users.certificates.create       |


        Cada usuario final debe de tener un certificado asociado para poder
        firmar documentos

        en esta API es posible crear un certificado para un usuario que
        pertenezca al sistema.

        Los usuarios pueden ser creado en la API [Crear
        Usuario](https://e-digital.cl/api/users)
      parameters:
        - *ref_0
        - *ref_5
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: >-
                    Ejemplo &#58; `MiS3cretP4as$word` <br>  Password del
                    certificado para poder abrirlo. <br> ***(CREO QUE AQUI FALTA
                    EL BASE 64 DEL DOCUMENTO)***
                  example: MiS3cretP4as$word
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - codigo
                  - mensaje
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  certificateId:
                    type: integer
                    format: int32
                    description: >-
                      Código único de usuario. Este código representa el id que
                      se genero al momento de guardar el usuario.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Certificado registrado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    certificateId: 1119
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"password":"MiS3cretP4as$word"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"password\":\"MiS3cretP4as$word\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"password\":\"MiS3cretP4as$word\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates",
              "method": "POST",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"password\":\"MiS3cretP4as$word\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/cetificates",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({password: 'MiS3cretP4as$word'}));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"password\":\"MiS3cretP4as$word\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload = "{\"password\":\"MiS3cretP4as$word\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/api/users/%7Bcod_user%7D/cetificates",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/users/{cod_user}/cetificates/{certificate_id}':
    get:
      summary: >-
        Obtiene informacion de un certificado según su usuarioId y
        certificadoId  (No Implementado)
      operationId: users.certificates.info
      tags:
        - Users
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |      users.certificates.info       |

         Los certificados deben pertenecer a un usuario y son necesarios para la firma de los documentos,
         Los cuales pueden ser creados y vinculados en la API [Crear Certificado](#operation/users.certificates.create)
         En esta API es posible obtener la información de dicho certificado indicando su fecha de vigencia.
      parameters:
        - *ref_0
        - *ref_5
        - name: certificate_id
          in: path
          description: Identificador del Certificado
          required: true
          example: 1119
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  validityFrom:
                    type: string
                    description: >-
                      Es la fecha desde cuando tiene vigencia el certificado, en
                      formato `dd-MM-yyyy`
                  validityTo:
                    type: string
                    description: >-
                      Es la fecha hasta cuando tiene vigencia el certificado, en
                      formato `dd-MM-yyyy`
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Certificado obtenido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    validityFrom: 14-03-2020
                    validityTo: 14-03-2022
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
    put:
      summary: >-
        Permite renovar un certificado de un usuario según su usuarioId y
        certicadoId  (No Implementado)
      operationId: users.certificates.renovate
      tags:
        - Users
      description: >
        | Información     |               Detalle              |

        |-----------------|------------------------------------|

        |  ID operación   |    users.certificates.renovate     |


        Si en algún momento determinado un certificado va a expirar y se
        requiere renovar este,

        es posible llamar este método para tal efecto. Al renovar un certificado
        este ya no

        puede ser usado nuevamente, sin embargo los documentos que fueron
        firmados con él, seguirán siendo validos.

        Si en algún momento se desea volver a crear un certificado se puede
        realizar en la API [Crear
        Certificado](#operation/users.certificates.create)
      parameters:
        - *ref_0
        - *ref_5
        - name: certificate_id
          in: path
          description: Identificador del Certificado
          required: true
          example: 1119
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Certificado removido forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D")
              .put(null)
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "method": "PUT",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "PUT",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("PUT",
            "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
    delete:
      summary: Permite revocar un certificado  (No Implementado)
      operationId: users.certificates.revoke
      tags:
        - Users
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |    users.certificates.revoke       |

         Si en algún momento determinado se requiere anular o revocar un certificado,
         es posible llamar este método para tal efecto. Al revocar un certificado este ya no
         puede ser usado nuevamente, sin embargo los documentos que fueron firmados con él, seguirán siendo validos.
         Si en algún momento se desea volver a crear un certificado se puede realizar en la API [Crear Certificado](#operation/users.certificates.create)
      parameters:
        - *ref_0
        - *ref_5
        - name: certificate_id
          in: path
          description: Identificador del Certificado
          required: true
          example: 1119
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Certificado revocado forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D")
              .delete(null)
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "method": "DELETE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("DELETE",
            "/api/users/%7Bcod_user%7D/cetificates/%7Bcertificate_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  /document:
    post:
      summary: Crea un Documento (No Implementado)
      operationId: document.create
      tags:
        - Documents
      description: >
        | Información     |         Detalle          |

        |-----------------|--------------------------|

        |ID operación     |     document.create      |


        En esta API es posible crear documentos en el sistema para que puedan
        ser verificado, firmado

        , aprobado, rechazado por un usuario final dentro del sistema.
      parameters:
        - *ref_0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - signers
                - final_recipients
                - template_id
                - description
              properties:
                description:
                  type: string
                  description: |
                    Ejemplo &#58; `prueba jonner11 2020-01-03T13:47:31.635Z`
                    <br>  Es la descripción al momento de guardar el documento.
                  example: 'prueba jonner11 2020-01-03T13:47:31.635Z'
                template_id:
                  type: integer
                  description: >-
                    Ejemplo &#58; `1047` <br>  Es template de firma documento
                    que se ocupará.
                  example: '1047'
                approvers:
                  type: array
                  description: >-
                    Ejemplo &#58; `["130410847", "33333333-3"]` <br> Rut de los
                    aprobadores
                  example:
                    - '130410847'
                    - 33333333-3
                signers:
                  type: array
                  description: >-
                    Ejemplo &#58; `["11111111-1", "22222222-2"]` <br> Cantidad
                    de firmantes según posición del arreglo
                  example:
                    - 11111111-1
                    - 22222222-2
                finalRecipients:
                  type: array
                  description: >-
                    Ejemplo &#58; `["signer-2"]` <br> Destinatarios finales del
                    documento.
                  example:
                    - signer-2
                settings:
                  description: >-
                    JSON con parametros extra para modificar los asignados en
                    las plantillas
                  type: object
                  example:
                    is_public: 'true'
                    vigency: '5'
                metadata:
                  description: >-
                    Ejemplo &#58; `{"documento":"2312", "tipo":"anexo",
                    "cod_sap":"3453"}` <br>JSON con información extra asociada
                    al documento
                  type: object
                  example:
                    documento: '2312'
                    tipo: anexo
                    cod_sap: '3453'
                document:
                  type: string
                  description: >
                    Ruta del documento a subir. Es campo requerido y se alterna
                    con document_b64 <br>

                    <br>***(HAY QUE VERIFICAR COMO SE REPESENTA ESTO EN LA
                    DOCUMENTACIÓN)***
                  example: '@/ruta/del/archivo.pdf'
                document_b64:
                  type: string
                  description: >
                    Contenido del archivo pdf en base64. Es campo requerido y se
                    alterna con document_b64 <br>q
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  document_hash:
                    type: string
                    description: >-
                      Código único de documento. Este código representa el id
                      que se generó al momento de crear el documento.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Documento creado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    document_hash: 7fef0af4f81641885aeff9f1e9b76bd0
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/document \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"description":"prueba jonner11 2020-01-03T13:47:31.635Z","template_id":"1047","approvers":["130410847","33333333-3"],"signers":["11111111-1","22222222-2"],"finalRecipients":["signer-2"],"settings":{"is_public":"true","vigency":"5"},"metadata":{"documento":"2312","tipo":"anexo","cod_sap":"3453"},"document":"@/ruta/del/archivo.pdf","document_b64":"string"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"description\":\"prueba jonner11
            2020-01-03T13:47:31.635Z\",\"template_id\":\"1047\",\"approvers\":[\"130410847\",\"33333333-3\"],\"signers\":[\"11111111-1\",\"22222222-2\"],\"finalRecipients\":[\"signer-2\"],\"settings\":{\"is_public\":\"true\",\"vigency\":\"5\"},\"metadata\":{\"documento\":\"2312\",\"tipo\":\"anexo\",\"cod_sap\":\"3453\"},\"document\":\"@/ruta/del/archivo.pdf\",\"document_b64\":\"string\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/document")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/document");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json", "{\"description\":\"prueba
            jonner11
            2020-01-03T13:47:31.635Z\",\"template_id\":\"1047\",\"approvers\":[\"130410847\",\"33333333-3\"],\"signers\":[\"11111111-1\",\"22222222-2\"],\"finalRecipients\":[\"signer-2\"],\"settings\":{\"is_public\":\"true\",\"vigency\":\"5\"},\"metadata\":{\"documento\":\"2312\",\"tipo\":\"anexo\",\"cod_sap\":\"3453\"},\"document\":\"@/ruta/del/archivo.pdf\",\"document_b64\":\"string\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/document",
              "method": "POST",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"description\":\"prueba jonner11 2020-01-03T13:47:31.635Z\",\"template_id\":\"1047\",\"approvers\":[\"130410847\",\"33333333-3\"],\"signers\":[\"11111111-1\",\"22222222-2\"],\"finalRecipients\":[\"signer-2\"],\"settings\":{\"is_public\":\"true\",\"vigency\":\"5\"},\"metadata\":{\"documento\":\"2312\",\"tipo\":\"anexo\",\"cod_sap\":\"3453\"},\"document\":\"@/ruta/del/archivo.pdf\",\"document_b64\":\"string\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/document",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              description: 'prueba jonner11 2020-01-03T13:47:31.635Z',
              template_id: '1047',
              approvers: ['130410847', '33333333-3'],
              signers: ['11111111-1', '22222222-2'],
              finalRecipients: ['signer-2'],
              settings: {is_public: 'true', vigency: '5'},
              metadata: {documento: '2312', tipo: 'anexo', cod_sap: '3453'},
              document: '@/ruta/del/archivo.pdf',
              document_b64: 'string'
            }));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/document",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"description\":\"prueba jonner11 2020-01-03T13:47:31.635Z\",\"template_id\":\"1047\",\"approvers\":[\"130410847\",\"33333333-3\"],\"signers\":[\"11111111-1\",\"22222222-2\"],\"finalRecipients\":[\"signer-2\"],\"settings\":{\"is_public\":\"true\",\"vigency\":\"5\"},\"metadata\":{\"documento\":\"2312\",\"tipo\":\"anexo\",\"cod_sap\":\"3453\"},\"document\":\"@/ruta/del/archivo.pdf\",\"document_b64\":\"string\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload = "{\"description\":\"prueba jonner11
            2020-01-03T13:47:31.635Z\",\"template_id\":\"1047\",\"approvers\":[\"130410847\",\"33333333-3\"],\"signers\":[\"11111111-1\",\"22222222-2\"],\"finalRecipients\":[\"signer-2\"],\"settings\":{\"is_public\":\"true\",\"vigency\":\"5\"},\"metadata\":{\"documento\":\"2312\",\"tipo\":\"anexo\",\"cod_sap\":\"3453\"},\"document\":\"@/ruta/del/archivo.pdf\",\"document_b64\":\"string\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/api/document", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/document/{document_hash}':
    get:
      summary: Obtiene un documento según su ID
      operationId: document.info
      tags:
        - Documents
      description: |
        | Información     |         Detalle          |
        |-----------------|--------------------------|
        |  ID operación   |     document.info        |

         Los documentos se crean para que los usuarios finales puedan verificar, firmar, aprobar, rechazar.
         En esta API es posible obtener un documento por su ID generado en la API [Crear Documento](#operation/documents.create).
      parameters:
        - *ref_0
        - &ref_6
          name: document_hash
          in: path
          description: Identificador del Documentos
          required: true
          example: 7fef0af4f81641885aeff9f1e9b76bd0
          schema:
            type: string
        - name: format_output
          in: query
          description: >
            Corresponde al tipo de salida que requiere<br>


            | format_output |
            Descripción                                                 |

            |---------------|-------------------------------------------------------------|

            | url_edigital  | Link dentro de
            e-Gestión                                    |

            | url_S3        | Link de repositorio para su descarga
            inmediata              |

            | base64        | COntenido del archivo en
            base64                             |

            | info          | Información del document dendtro de la plataforma
            (default) |
          required: false
          example: url_edigital
          schema:
            type: string
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  urlDocument:
                    type: string
                    description: La url generada para poder ver/descargar el documento.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Documento obtenido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    urlDocument: 'https://urlDocumento'
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/document/%7Bdocument_hash%7D?format_output=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
    delete:
      summary: Remueve un documento del flujo  (No Implementado)
      operationId: document.remove
      tags:
        - Documents
      description: >
        | Información     |         Detalle          |

        |-----------------|--------------------------|

        |  ID operación   |     document.remove      |


        Cada documento creado en el API [Crear
        Documento](#operation/documents.create), pasa por un flujo de
        aprobaciones.

        En esta API es posible remover un documento del flujo.

        Para que de esta forma no sé considerado como documento pendiente dentro
        de este.
      parameters:
        - *ref_0
        - *ref_6
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: >-
                    Ejemplo &#58; `Documento Sacado del Flujo` <br> Es el
                    comentario de por que se le esta sacando del flujo el
                    documento
                  example: Documento Sacado del Flujo
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Documento removido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"comment":"Documento Sacado del Flujo"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"comment\":\"Documento Sacado del Flujo\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D")
              .delete(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json", "{\"comment\":\"Documento
            Sacado del Flujo\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D",
              "method": "DELETE",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"comment\":\"Documento Sacado del Flujo\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/document/%7Bdocument_hash%7D",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({comment: 'Documento Sacado del Flujo'}));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_POSTFIELDS => "{\"comment\":\"Documento Sacado del Flujo\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload = "{\"comment\":\"Documento Sacado del Flujo\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("DELETE", "/api/document/%7Bdocument_hash%7D", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
    post:
      summary: Firmar un Documento (No Implementado)
      operationId: document.firm
      tags:
        - Documents
      description: >
        | Información     |         Detalle          |

        |-----------------|--------------------------|

        |  ID operación   |     document.firm        |



        Luego de crear un documento en el API [Crear
        Documento](#operation/documents.create), este pasa por un flujo

        de firmas para esta acción se debe ejecutar este método indicando qué
        template se ocupara para efectuar la

        firma. El template se puede crear en el API [Crear
        Template](#organizations.templates.create).

        O bien si no se desea ocupar un template se pueden indicar el eje X y el
        eje Y.
      parameters:
        - *ref_0
        - *ref_6
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - certificate_pass
              properties:
                certificate_pass:
                  type: integer
                  description: >-
                    Ejemplo &#58; `Mi$3cr3tPa$$` <br> Password usado por el
                    certificado.
                  example: Mi$3cr3tPa$$
                certificateID:
                  type: integer
                  description: >-
                    Ejemplo &#58; `9834` <br> Id unico del certificado asociado
                    al usuario que desea firmar.
                  example: '9834'
                x:
                  type: integer
                  description: >-
                    Ejemplo &#58; `300` <br> Posición de la firma en pixeles
                    para el eje X (horizontal) con respecto a la página.
                  example: '300'
                'y':
                  type: integer
                  description: >-
                    Ejemplo &#58; `700` <br> Posición de la firma en pixeles
                    para el eje Y (vertical) con respecto a la páginas XX.
                  example: '700'
                templateId:
                  type: integer
                  description: >-
                    Ejemplo &#58; `12` <br> Corresponde a la posición donde ira
                    la firma según su template.
                  example: '12'
                page:
                  type: string
                  description: >-
                    Ejemplo &#58; `1` <br> Número de página en donde se pondrá
                    la estampa visual (la primera página es la nº 1) , la última
                    página (sin importar cuantas tenga) se especifica con el
                    valor `ultima`.
                  example: '1'
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  urlDocumento:
                    type: integer
                    format: int32
                    description: >-
                      Código único de documento. Este código representa el id
                      que se genero al momento de crear el documento.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Documento firmado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    urlDocumento: 'https://urlDocumento'
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D \
              --header 'content-type: application/json' \
              --header 'token: SOME_STRING_VALUE' \
              --data '{"certificate_pass":"Mi$3cr3tPa$$","certificateID":"9834","x":"300","y":"700","templateId":"12","page":"1"}'
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"certificate_pass\":\"Mi$3cr3tPa$$\",\"certificateID\":\"9834\",\"x\":\"300\",\"y\":\"700\",\"templateId\":\"12\",\"page\":\"1\"}");

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D");

            var request = new RestRequest(Method.POST);

            request.AddHeader("content-type", "application/json");

            request.AddHeader("token", "SOME_STRING_VALUE");

            request.AddParameter("application/json",
            "{\"certificate_pass\":\"Mi$3cr3tPa$$\",\"certificateID\":\"9834\",\"x\":\"300\",\"y\":\"700\",\"templateId\":\"12\",\"page\":\"1\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D",
              "method": "POST",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              },
              "processData": false,
              "data": "{\"certificate_pass\":\"Mi$3cr3tPa$$\",\"certificateID\":\"9834\",\"x\":\"300\",\"y\":\"700\",\"templateId\":\"12\",\"page\":\"1\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/document/%7Bdocument_hash%7D",
              "headers": {
                "content-type": "application/json",
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              certificate_pass: 'Mi$3cr3tPa$$',
              certificateID: '9834',
              x: '300',
              y: '700',
              templateId: '12',
              page: '1'
            }));
            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"certificate_pass\":\"Mi$3cr3tPa$$\",\"certificateID\":\"9834\",\"x\":\"300\",\"y\":\"700\",\"templateId\":\"12\",\"page\":\"1\"}",
              CURLOPT_HTTPHEADER => array(
                "content-type: application/json",
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            payload =
            "{\"certificate_pass\":\"Mi$3cr3tPa$$\",\"certificateID\":\"9834\",\"x\":\"300\",\"y\":\"700\",\"templateId\":\"12\",\"page\":\"1\"}"


            headers = {
                'content-type': "application/json",
                'token': "SOME_STRING_VALUE"
                }

            conn.request("POST", "/api/document/%7Bdocument_hash%7D", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/document/{document_hash}/logs':
    get:
      summary: Obtiene Logs de un documento según su ID  (No Implementado)
      operationId: document.logs
      tags:
        - Documents
      description: >
        | Información     |         Detalle          |

        |-----------------|--------------------------|

        |  ID operación   |     document.logs        |


        Los documentos desde el momento que son creados hasta el final del
        proceso de estos van

        registrando un logs(registros de actividades), cuando se quiera obtener
        el historial de

        un documento en específico se puede llamar este método para poder
        visualizarlos según su ID.
      parameters:
        - *ref_0
        - *ref_6
        - name: from
          in: query
          description: >-
            Corresponde a la fecha, desde que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: false
          example: 12-03-2020
          schema:
            type: string
        - name: to
          in: query
          description: >-
            Corresponde a la fecha, hasta que fecha quiere el resultado en
            formato `dd-MM-yyyy`
          required: false
          example: 12-05-2020
          schema:
            type: string
        - name: page
          in: query
          description: Corresponde al número de páginas que se quiere obtener la respuesta.
          required: false
          example: 5
          schema:
            type: integer
        - name: records
          in: query
          description: Corresponde a la cantidad de registros que se quiere por página.
          required: false
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  logs:
                    type: array
                    items:
                      type: object
                    description: Logs de lo que se ha hecho con el documento.
                  totalRegistros:
                    type: integer
                    description: Cantidad de los registros encontrados
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Historial obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    totalRegistros: 50
                    logs:
                      - documet_id: 23456
                        date: '2020-08-06'
                        user_id: 22
                        action: to_create
                        text: ''
                      - documet_id: 23456
                        date: '2020-08-06'
                        user_id: 22
                        action: to_sign
                        text: ''
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/document/%7Bdocument_hash%7D/logs?from=SOME_STRING_VALUE&to=SOME_STRING_VALUE&page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  /organizations:
    get:
      summary: Obtiene el listado de las organizaciones  (No Implementado)
      operationId: organizations.list
      tags:
        - Organization
      description: |
        | Información     |         Detalle          |
        |-----------------|--------------------------|
        |  ID operación   |   organizations.list     |

         Las organizaciones representan a las empresas creadas dentro del sistema.
         En esta API es posible obtener un listado de las organizaciones suscritas actualmente.
      parameters:
        - *ref_0
        - name: page
          in: query
          description: Corresponde al número de páginas que se quiere obtener la respuesta.
          required: false
          example: 5
          schema:
            type: integer
        - name: records
          in: query
          description: Corresponde a la cantidad de registros que se quiere por página.
          required: false
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  organizations:
                    type: array
                    items:
                      type: string
                    description: Listado de las organizaciones subcritas.
                  totalRegistros:
                    type: integer
                    description: Cantidad de los registros encontrados
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Listado de organizaciones obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    totalRegistros: 50
                    organizations:
                      - cod_1: Empresa 1
                      - cod_2: Empresa 2
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/organizations?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/organizations/{cod_organization}':
    get:
      summary: Obtiene informacion de una organización según su ID  (No Implementado)
      operationId: organizations.info
      tags:
        - Organization
      description: |
        | Información     |         Detalle          |
        |-----------------|--------------------------|
        |  ID operación   |   organizations.info     |

         Una organización representa una empresa dentro del sistema.
         A su vez la organización tiene múltiples usuarios los cuales pueden ser creado en el API [Crear Usuario](#operation/users.create),
         y asociados a un organización en el API [Invitar Usuario](#operation/organizations.users.invite)
         En esta API es posible obtener la información de una organización en específica.
      parameters:
        - *ref_0
        - &ref_7
          name: cod_organization
          in: path
          description: Identificador de la organización
          required: true
          example: cod_1
          schema:
            type: string
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  organizations:
                    type: object
                    description: >-
                      Es el objeto de la información obtenida de la
                      organización.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Listado de organizaciones obtenido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    organizations:
                      cod_organization: cod_1
                      nombreOrganizacion: Empresa 1
                      cod_project: EMPRESA
                      parent: null
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET", "/api/organizations/%7Bcod_organization%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/organizations/{cod_organization}/templates':
    get:
      summary: >-
        Obtiene el listado de los template de las organizaciones  (No
        Implementado)
      operationId: organizations.templates.list
      tags:
        - Organization
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |    organizations.templates.list    |

         Un template son las plantilla que muestra la parte del documento donde se fijara firma, estos se pueden crear en la
         API [Crear Template](#operation/organizations.templates.create).
         En esta API es posible obtener un listado de todos los template de las organizaciones suscritas actualmente.
      parameters:
        - *ref_0
        - *ref_7
        - name: page
          in: query
          description: Corresponde al número de páginas que se quiere obtener la respuesta.
          required: false
          example: 5
          schema:
            type: integer
        - name: records
          in: query
          description: Corresponde a la cantidad de registros que se quiere por página.
          required: false
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  templates:
                    type: array
                    items:
                      type: string
                    description: Listado de los templates de la empresas subcritas.
                  totalRegistros:
                    type: integer
                    description: Cantidad de los registros encontrados
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Listado de templates obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    totalRegistros: 50
                    templates:
                      - Template1
                      - Template2
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/organizations/%7Bcod_organization%7D/templates?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/organizations/{cod_organization}/templates/{template_id}':
    get:
      summary: >-
        Obtiene informacion de un template según su templateID  (No
        Implementado)
      operationId: organizations.templates
      tags:
        - Organization
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |      organizations.templates       |

         En esta API es posible obtener la información de un template de una organización según su ID
         el cual mostrara la ubicación donde se fija la firma según lo indica este.
      parameters:
        - *ref_0
        - *ref_7
        - name: template_id
          in: path
          description: Identificador del template
          required: true
          example: 1121
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  templates:
                    type: string
                    description: Es el templates obtenido.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Template obtenido de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    templates: template1
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/organizations/%7Bcod_organization%7D/templates/%7Btemplate_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/organizations/{cod_organization}/users':
    get:
      summary: >-
        Obtiene el listado de las usuarios de una organización  (No
        Implementado)
      operationId: organizations.users.list
      tags:
        - Organization
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |    organizations.users.list        |

         Dentro de las organizaciones existen múltiples usuarios finales los cuales pueden ser invitados a
         una organización en el API [Invitar Usuario](#operation/organizations.users.invite).
         En esta API es posible obtener un listado de todos los usuarios pertenecientes a la organización según su ID.
      parameters:
        - *ref_0
        - *ref_7
        - name: page
          in: query
          description: Corresponde al número de páginas que se quiere obtener la respuesta.
          required: false
          example: 5
          schema:
            type: integer
        - name: records
          in: query
          description: Corresponde a la cantidad de registros que se quiere por página.
          required: false
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  users:
                    type: array
                    items:
                      type: string
                    description: Listado de los usuarios pertenicientes a la organización
                  totalRegistros:
                    type: integer
                    description: Cantidad de los registros encontrados
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Listado de los usuarios obtenido de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    totalRegistros: 50
                    users:
                      - User1
                      - User2
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE' \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE")
              .get()
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("GET",
            "/api/organizations/%7Bcod_organization%7D/users?page=SOME_INTEGER_VALUE&records=SOME_INTEGER_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
  '/organizations/{cod_organization}/users/{cod_user}':
    delete:
      summary: Permite desvincular un usario de una organización  (No Implementado)
      operationId: organizations.users.remove
      tags:
        - Organization
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |    organizations.users.remove      |

         Las organizaciones se componen de múltiples usuarios finales los cuales pueden
         participar dentro del flujo de un documento en esta API es posible desvincular un usuario
         de una organización indicando el ID del usuario que de desea desvincular.
      parameters:
        - *ref_0
        - *ref_7
        - *ref_5
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Usuario desvinculado de forma satisfactoria
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D")
              .delete(null)
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              "method": "DELETE",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("DELETE",
            "/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
    post:
      summary: Invita a un usario a una organización.  (No Implementado)
      operationId: organizations.users.invite
      tags:
        - Organization
      description: |
        | Información     |               Detalle              |
        |-----------------|------------------------------------|
        |  ID operación   |   organizations.users.invite       |

         Los usuarios finales deben pertenecer a una organización para de esta forma poder participar,
         en el flujo de los documentos en esta API es posible enviar una invitación a un usuario
         para que se vincule a una organización.
      parameters:
        - *ref_0
        - *ref_7
        - *ref_5
      responses:
        '200':
          description: Operación efectuada de forma satisfactoria
          content:
            application/json:
              schema:
                type: object
                required:
                  - codigo
                  - mensaje
                properties:
                  code:
                    type: integer
                    format: int32
                    description: >-
                      Código de resultado de la operación, siendo `0` un
                      resultado satisfactorio. Cualquier otro código es
                      indicativo de error.
                    example: null
                  message:
                    type: string
                    description: >-
                      Mensaje de respuesta, traducción humana del código de
                      resultado.
                  duration:
                    type: integer
                    format: int32
                    description: >-
                      Tiempo (en milisegundos) que tardó en procesarse la
                      solicitud.
                  time:
                    type: string
                    description: >-
                      Hora a la que llego la solicitud a E-Digital, en formato
                      `yyyy-MM-dd HH:mm:ss.SSS`
                  trackingId:
                    type: string
                    description: >-
                      Código único de seguimiento. Este código representa al
                      proceso completo de la solicitud realizada, si tienes
                      problemas, te pediremos este código.
                  enviado:
                    type: boolean
                    enum:
                      - 'true'
                      - 'false'
                    description: Corresponde a si se envio o no el correo.
              examples:
                Token Inválido: *ref_1
                Sin Permiso: *ref_2
                Respuesta OK:
                  value:
                    code: 0
                    duration: 780
                    time: 2020-08-04T09:44:42.245Z
                    message: Usuario invitado de forma satisfactoria.
                    trackingId: eaa362909975204aa43bd28-ba9e4503db58
                    enviado: true
        '400': *ref_3
        '500': *ref_4
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D \
              --header 'token: SOME_STRING_VALUE'
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D")
              .post(null)
              .addHeader("token", "SOME_STRING_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Csharp + Restsharp
          source: >-
            var client = new
            RestClient("https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D");

            var request = new RestRequest(Method.POST);

            request.AddHeader("token", "SOME_STRING_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Javascript + Jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              "method": "POST",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Node + Native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "apipub.e-digital.global",
              "port": null,
              "path": "/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              "headers": {
                "token": "SOME_STRING_VALUE"
              }
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apipub.e-digital.global/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                "token: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apipub.e-digital.global")


            headers = { 'token': "SOME_STRING_VALUE" }


            conn.request("POST",
            "/api/organizations/%7Bcod_organization%7D/users/%7Bcod_user%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
tags:
  - name: Security
    description: Mecanismos de seguridad
  - name: Users
    description: Conjunto de API's que permiten la administración de los usuarios.
  - name: Organization
    description: Conjunto de API's que permiten la administración de las organizaciones.
  - name: Documents
    description: Conjunto de API's que permiten la administración de los documentos.
